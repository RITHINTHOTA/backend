pipeline {
    agent {
        label 'AGENT-1'
    }
    options {
        timeout(time: 30, unit: 'MINUTES')
        disableConcurrentBuilds()
        ansiColor('xterm') 
    }
    environment {
        def appVersion = ''
        nexusUrl = 'nexus.rithinexpense.online:8081'
    }
    stages {
        stage ('read the version'){
            steps {
                script {
                  def packageJson = readJSON file: 'package.json'
                  appVersion = packageJson.version
                  echo "application version is: $appVersion"
                }
            }
        }
        stage('Install dependencies'){
            steps {
                sh """
                 npm install
                 ls -ltr
                 echo "application version is: $appVersion"
                """
            }
        }
        stage('Build') {
            steps {
              sh """
              zip -q -r backend-${appVersion}.zip * -x Jenkinsfile -x backend-${appVersion}.zip
               ls -ltr
              """  
            }
        }
        stage('Nexus Artifact Uploader') {
            steps {
               script {
                   nexusArtifactUploader(
                        nexusVersion: 'nexus3',
                        protocol: 'http',
                        nexusUrl: "${nexusUrl}",
                        groupId: 'com.expense',
                        version: "${appVersion}",
                        repository: "backend",
                        credentialsId: 'nexus-auth',
                        artifacts: [
                            [artifactId: "backend" ,
                            classifier: '',
                            file: "backend-" + "${appVersion}" + '.zip',
                            type: 'zip']

                        ]
                    )
                }
            }
        }
    }   
    post{
        always {
          deleteDir()
        }
        success{
             echo "It will run when the pipeline is success"
        }
        failure {
             echo "It will run when the pipeline is failure" 
        }
    }
}      